import "dotenv/config";
import Role from "../models/Role";
import Module from "../models/Module";
import Component from "../models/Component";
import Agent from "../models/Agent";
import User from "../models/User";
import Affectation from "../models/Affectation";
import CategorieAgent from "../models/CategorieAgent";
import GradeAgent from "../models/GradeAgent";
import PosteAgent from "../models/PosteAgent";
import { Remuneration, RemunerationCreationAttributes } from "../models/Remuneration";
import Retraite, { RetraiteCreationAttributes } from "../models/Retraite";
import { PersonnelMovement } from "../models/PersonnelMovement";
import {
	Recrutement,
	RecrutementCreationAttributes,
	RecrutementAttributes,
} from "../models/Recrutement";
import Reclammation, { ReclammationCreationAttributes } from "../models/Reclammation";
import DirectionAgent from "../models/DirectionAgent";
import TaskForecast from "../models/TaskForecast";
import {
	Conges,
	Discipline,
	PretRetenu,
	Promotion,
	RoleComponent,
	Training,
	userComponent,
} from "../models/initModel";
import Evaluation from "../models/Evaluation";
import DocumentRessourceHumaine, {
	DocumentRessourceHumaineAttributes,
	DocumentRessourceHumaineCreationAttributes,
} from "../models/DocumentRessourceHumaine";
import SocialSupport, {
	SocialSupportAttributes,
	SocialSupportCreationAttributes,
} from "../models/SocialSupport";
import { sidebarItems } from "../../../frontend/data/sidebarItems";
import { connectToDatabase } from "../config/database.config";

const slugify = (text: string) => {
	return text
		.toString()
		.toLowerCase()
		.replace(/\s+/g, "-") // Replace spaces with -
		.replace(/[^\w\-]+/g, "") // Remove all non-word chars
		.replace(/\-\-+/g, "-") // Replace multiple - with single -
		.replace(/^-+/, "") // Trim - from start of text
		.replace(/-+$/, ""); // Trim - from end of text
};

async function seedAffectations() {
	console.log(`\n=== Cr√©ation des affectations ===`);
	const affectations: { nom: string }[] = [
		{ nom: "Rectorat" },
		{ nom: "SGAD" },
		{ nom: "SGAC" },
		{ nom: "SGR" },
		{ nom: "Facult√© de M√©decine" },
		{ nom: "Facult√© de Droit" },
	];
	for (const item of affectations) {
		await Affectation.findOrCreate({ where: { nom: item.nom }, defaults: item });
	}
	console.log(`‚úÖ Affectations cr√©√©es/v√©rifi√©es.`);
}

async function seedCategories() {
	console.log(`\n=== Cr√©ation des cat√©gories d'agents ===`);
	const categories: { nom: string }[] = [
		{ nom: "PE" },
		{ nom: "PO" },
		{ nom: "P" },
		{ nom: "PA" },
		{ nom: "CT" },
		{ nom: "Ass" },
		{ nom: "ATA1" },
		{ nom: "AA1" },
	];
	for (const item of categories) {
		await CategorieAgent.findOrCreate({
			where: { nom: item.nom },
			defaults: { nom: item.nom as any },
		});
	}
	console.log(`‚úÖ Cat√©gories cr√©√©es/v√©rifi√©es.`);
}

async function seedGrades() {
	console.log(`\n=== Cr√©ation des grades ===`);
	const grades: { nom: string }[] = [
		{ nom: "Professeur Ordinaire" },
		{ nom: "Chef de Travaux" },
		{ nom: "Assistant" },
		{ nom: "Agent Administratif Niveau 1" },
		{ nom: "Technicien Sup√©rieur" },
	];
	for (const item of grades) {
		await GradeAgent.findOrCreate({ where: { nom: item.nom }, defaults: { nom: item.nom as any } });
	}
	console.log(`‚úÖ Grades cr√©√©s/v√©rifi√©s.`);
}

async function seedPostes() {
	console.log(`\n=== Cr√©ation des postes ===`);
	const postes: { nom: string }[] = [
		{ nom: "Directeur du Personnel" },
		{ nom: "Directeur du patrimoine" },
		{ nom: "Appariteur" },
		{ nom: "Charg√© de scolarit√©" },
		{ nom: "Charg√© de biblioth√®que" },
	];
	for (const item of postes) {
		await PosteAgent.findOrCreate({ where: { nom: item.nom }, defaults: { nom: item.nom as any } });
	}
	console.log(`‚úÖ Postes cr√©√©s/v√©rifi√©s.`);
}

async function assignRolesToComponents(
	roleNames: string[],
	componentNames: string[],
	moduleId?: number,
) {
	console.log(`\n=== Affectation des r√¥les aux composants ===`);

	// Charger les IDs des r√¥les
	const roles = await Role.findAll({ where: { name: roleNames } });
	if (roles.length !== roleNames.length) {
		console.log(`‚ö†Ô∏è  Attention: ${roleNames.length - roles.length} r√¥les non trouv√©s`);
	}

	// Charger les IDs des composants
	const whereClause: { name: string[]; moduleId?: number } = { name: componentNames };
	if (moduleId) {
		whereClause.moduleId = moduleId;
	}
	const components = await Component.findAll({ where: whereClause });
	if (components.length !== componentNames.length) {
		console.log(
			`‚ö†Ô∏è  Attention: ${componentNames.length - components.length} composants non trouv√©s`,
		);
	}

	// Cr√©er les relations
	let created = 0;
	let existing = 0;

	for (const role of roles) {
		for (const component of components) {
			const alreadyExists = await RoleComponent.findOne({
				where: { roleId: role.id, componentId: component.id },
			});

			if (!alreadyExists) {
				await RoleComponent.create({
					roleId: role.id,
					componentId: component.id,
				});
				console.log(`‚úÖ R√¥le '${role.name}' ‚Üí Composant '${component.name}'`);
				created++;
			} else {
				console.log(`‚è≠Ô∏è  R√¥le '${role.name}' ‚Üí Composant '${component.name}' (d√©j√† existant)`);
				existing++;
			}
		}
	}

	console.log(
		`\nüìä R√©sum√©: ${created} nouvelles relations cr√©√©es, ${existing} relations existantes`,
	);
}

async function seedConges() {
	console.log(`\n=== Cr√©ation des donn√©es de cong√©s ===`);

	const agents = await Agent.findAll();
	if (agents.length === 0) {
		console.log("‚ö†Ô∏è  Aucun agent trouv√©, impossible de cr√©er des cong√©s.");
		return;
	}

	const typesConges: ("Reconstitution" | "Circonstance" | "Autres")[] = [
		"Reconstitution",
		"Circonstance",
		"Autres",
	];
	const statuts: ("en attente" | "approuve" | "rejete")[] = ["en attente", "approuve", "rejete"];

	let createdCount = 0;

	// Cr√©er 50 demandes de cong√© pour des agents al√©atoires
	for (let i = 0; i < 50; i++) {
		const agent = agents[Math.floor(Math.random() * agents.length)];

		// S'assurer que l'approbateur et le rempla√ßant ne sont pas l'agent lui-m√™me
		let approver = agents[Math.floor(Math.random() * agents.length)];
		while (approver.id === agent.id) {
			approver = agents[Math.floor(Math.random() * agents.length)];
		}

		let replacer = agents[Math.floor(Math.random() * agents.length)];
		while (replacer.id === agent.id || replacer.id === approver.id) {
			replacer = agents[Math.floor(Math.random() * agents.length)];
		}

		const statut = statuts[Math.floor(Math.random() * statuts.length)];
		const dateDebut = new Date();
		dateDebut.setFullYear(2025 + Math.floor(Math.random() * 1)); // 2025
		dateDebut.setMonth(Math.floor(Math.random() * 12));
		dateDebut.setDate(Math.floor(Math.random() * 28) + 1);

		const dateFin = new Date(dateDebut);
		dateFin.setDate(dateDebut.getDate() + Math.floor(Math.random() * 28) + 1); // Cong√© de 1 √† 15 jours

		const congesData = {
			agentId: agent.id,
			dateDebut,
			dateFin,
			statut,
			TypeConges: typesConges[Math.floor(Math.random() * typesConges.length)],
			commentaire: `Demande de cong√© pour ${agent.prenom} ${agent.nom}`,
			approuvePar: statut !== "en attente" ? approver.id : undefined,
			remplacantId: statut === "approuve" ? replacer.id : undefined,
			dateDecision: statut !== "en attente" ? new Date() : undefined,
			commentaireDecision:
				statut !== "en attente" ? `D√©cision pour la demande de ${agent.prenom}` : undefined,
		};

		await Conges.create(congesData as any);
		createdCount++;
	}

	console.log(`‚úÖ ${createdCount} demandes de cong√© cr√©√©es.`);
}

async function seedPrets() {
	console.log(`\n=== Cr√©ation des donn√©es de pr√™ts et retenues ===`);

	const agents = await Agent.findAll();
	if (agents.length === 0) {
		console.log("‚ö†Ô∏è  Aucun agent trouv√©, impossible de cr√©er des pr√™ts.");
		return;
	}

	const statuses: ("en_attente" | "approuve" | "rejete" | "en_cours" | "termine")[] = [
		"en_attente",
		"approuve",
		"rejete",
		"en_cours",
		"termine",
	];
	const motifs = [
		"Achat v√©hicule",
		"R√©novation maison",
		"Frais de scolarit√©",
		"Urgence m√©dicale",
		"Projet personnel",
	];

	let createdCount = 0;

	// Cr√©er 40 demandes de pr√™t pour des agents al√©atoires
	for (let i = 0; i < 40; i++) {
		const agent = agents[Math.floor(Math.random() * agents.length)];
		const status = statuses[Math.floor(Math.random() * statuses.length)];
		const montant = Math.floor(Math.random() * (5000 - 500 + 1)) + 500;
		const dureeRemboursement = Math.floor(Math.random() * (24 - 6 + 1) + 6); // Dur√©e entre 6 et 24 mois
		const tauxInteret = Math.random() * (5 - 1) + 1; // Taux entre 1% et 5%

		const dateDemande = new Date();
		dateDemande.setFullYear(2025 + Math.floor(Math.random() * 1)); // 2023 ou 2024
		dateDemande.setMonth(Math.floor(Math.random() * 12));

		const pretData: any = {
			agentId: agent.id,
			montant,
			dateDemande,
			dureeRemboursement,
			tauxInteret,
			motif: motifs[Math.floor(Math.random() * motifs.length)],
			status,
		};

		if (status !== "en_attente" && status !== "rejete") {
			pretData.dateAccord = new Date(dateDemande.getTime() + 7 * 24 * 60 * 60 * 1000); // 7 jours apr√®s
			const montantTotal = montant * (1 + tauxInteret / 100);
			pretData.montantMensuel = montantTotal / dureeRemboursement;

			if (status === "en_cours") {
				pretData.remboursementsEffectues = Math.floor(Math.random() * (dureeRemboursement - 1));
				pretData.soldeRestant =
					montantTotal - pretData.montantMensuel * pretData.remboursementsEffectues;
			} else if (status === "termine") {
				pretData.remboursementsEffectues = dureeRemboursement;
				pretData.soldeRestant = 0;
			}
		}

		await PretRetenu.create(pretData);
		createdCount++;
	}

	console.log(`‚úÖ ${createdCount} demandes de pr√™t cr√©√©es.`);
}

async function seedEvaluations() {
	console.log(`\n=== Cr√©ation des donn√©es d'√©valuations ===`);

	const agents = await Agent.findAll();
	if (agents.length < 2) {
		console.log("‚ö†Ô∏è  Pas assez d'agents trouv√©s, impossible de cr√©er des √©valuations.");
		return;
	}

	const periodes = ["2023-Semestre 1", "2023-Semestre 2", "2024-Semestre 1"];
	let createdCount = 0;

	// Cr√©er 150 √©valuations
	for (let i = 0; i < 150; i++) {
		const agent = agents[Math.floor(Math.random() * agents.length)];
		let evaluateur = agents[Math.floor(Math.random() * agents.length)];

		// S'assurer que l'√©valuateur n'est pas l'agent lui-m√™me
		while (evaluateur.id === agent.id) {
			evaluateur = agents[Math.floor(Math.random() * agents.length)];
		}

		const discipline = Math.floor(Math.random() * 16) + 5; // Score entre 5 et 20
		const savoirEtre = Math.floor(Math.random() * 16) + 5;
		const collaboration = Math.floor(Math.random() * 16) + 5;
		const leadership = Math.floor(Math.random() * 16) + 5;
		const rigueur = Math.floor(Math.random() * 16) + 5;

		const scoreGlobal = discipline + savoirEtre + collaboration + leadership + rigueur;

		const evaluationData = {
			agent: agent.id,
			periode: periodes[Math.floor(Math.random() * periodes.length)],
			evaluateur: evaluateur.id,
			discipline,
			savoirEtre,
			collaboration,
			leadership,
			rigueur,
			observations: `Observations pour l'√©valuation de ${agent.prenom} ${agent.nom}.`,
			objectifs: `Objectifs pour la prochaine p√©riode.`,
			scoreGlobal,
		};

		await Evaluation.create(evaluationData as any);
		createdCount++;
	}

	console.log(`‚úÖ ${createdCount} √©valuations cr√©√©es.`);
}

async function seedDiscipline() {
	console.log(`\n=== Cr√©ation des donn√©es de discipline ===`);

	const agents = await Agent.findAll();
	if (agents.length === 0) {
		console.log("‚ö†Ô∏è  Aucun agent trouv√©, impossible de cr√©er des cas de discipline.");
		return;
	}

	const typesFaute: any[] = [
		"Retards (08h00-09h00)",
		"Absences (apr√®s 09h00)",
		"Sorties non autoris√©es",
		"Absences au poste",
		"Mauvais usage de documents administratifs",
		"Visites sans rapport avec le service",
		"Agents de cat√©gories C et D visit√©s",
		"Visites pr√©judiciables pour l‚ÄôUNIGOM",
		"Usage personnel du t√©l√©phone/r√©seaux sociaux pendant le service",
		"Refus d'ex√©cuter les ordres du chef hi√©rarchique",
		"Refus d'ex√©cuter les ordres dans le d√©lai imparti avec raison valable",
		"Pr√©judices dus au refus d'ex√©cuter les ordres",
		"Agents ne v√©rifiant pas l'ex√©cution des ordres par leurs subordonn√©s",
		"Abandon de poste sans formalit√©s",
		"Non-r√©ponse √† l'affectation dans le d√©lai imparti sans raison valable",
		"Non-communication de faits compromettant le service",
		"Induction en erreur du chef hi√©rarchique ou collaborateur",
		"Comportement nuisant √† l‚Äôambiance de travail",
		"Voies de fait sur les chefs ou pairs",
		"Injures ou voies de fait par les chefs hi√©rarchiques",
		"Usage abusif des biens de l‚ÄôUNIGOM",
		"Usage abusif des agents par le chef hi√©rarchique",
		"Destruction ou disparition de documents de l‚ÄôUNIGOM",
		"Recrutement et alignement ill√©gaux aux avantages",
		"Sollicitation de dons ou gratifications",
		"Acceptation d'argent pour actes r√©guliers",
		"Vol de biens ou documents de l‚ÄôUNIGOM",
		"Actes de concussion",
		"Perceptions sans base l√©gale",
		"√âtablissement de faux documents",
		"Fausses d√©clarations pour avantages illicites",
		"Participation √† une d√©cision avec conflit d'int√©r√™ts",
		"Non-r√©cusation dans un dossier avec conflit d'int√©r√™ts",
		"Actes sans motivation administrative valable",
		"Actes motiv√©s par discrimination ou favoritisme",
		"Acceptation de mandat dans des affaires priv√©es",
		"Acceptation de mandat dans une entreprise priv√©e",
		"Travaux non autoris√©s pour un tiers",
		"Activit√©s scientifiques non autoris√©es pendant le service",
		"Exercice d'une activit√© commerciale",
		"Pr√™ts d'argent √† taux usurier sur le lieu de travail",
		"Atteinte √† la moralit√© publique sur le lieu de travail",
		"Condamnation √† une peine de servitude p√©nale",
		"Condamnation pour corruption ou d√©tournement",
		"Indiscr√©tion sur des faits confidentiels",
		"Fuite d'information pr√©judiciable",
		"Indiscr√©tion sur un secret d'√âtat",
		"Interview ou d√©claration non autoris√©e",
		"Atteinte √† la s√©curit√© de l'√âtat",
		"Adh√©sion √† un parti politique ou groupe nuisible",
		"Port d'armes contre le pays",
		"Facilitation de l'entr√©e d'ennemis sur le territoire",
		"Intelligence avec une puissance ennemie",
		"Refus de participer √† une c√©r√©monie officielle",
		"Agents en mission d'inspection ouvrant une action disciplinaire",
		"Octroi d'avantages illicites par man≈ìuvres frauduleuses",
		"D√©gradation de biens de l'√âtat sans intention de nuire",
		"D√©gradation de biens de l'√âtat avec intention de nuire",
		"Perception indue de sommes ou avantages par des agents",
	];
	const gravites: ("L√©g√®re" | "Moyenne" | "Grave" | "Tr√®s grave")[] = [
		"L√©g√®re",
		"Moyenne",
		"Grave",
		"Tr√®s grave",
	];
	const sanctions: (
		| "Bl√¢me"
		| "Mise √† pied - 3 jours"
		| "Retenue sur salaire"
		| "D√©gradation"
		| "R√©vocation"
	)[] = ["Bl√¢me", "Mise √† pied - 3 jours", "Retenue sur salaire", "D√©gradation", "R√©vocation"];
	const statuts: ("En attente" | "Valid√©" | "Rejet√©")[] = ["En attente", "Valid√©", "Rejet√©"];

	let createdCount = 0;

	// Cr√©er 30 cas de discipline
	for (let i = 0; i < 30; i++) {
		const agent = agents[Math.floor(Math.random() * agents.length)];
		const dateIncident = new Date();
		dateIncident.setFullYear(2025 + Math.floor(Math.random() * 1)); // 2023 ou 2024
		dateIncident.setMonth(Math.floor(Math.random() * 12));
		dateIncident.setDate(Math.floor(Math.random() * 28) + 1);

		const disciplineData = {
			agentId: agent.id,
			typeFaute: typesFaute[Math.floor(Math.random() * typesFaute.length)],
			gravite: gravites[Math.floor(Math.random() * gravites.length)],
			sanctionProposee: sanctions[Math.floor(Math.random() * sanctions.length)],
			dateIncident,
			description: `Description de l'incident pour ${agent.prenom} ${agent.nom}.`,
			justification: `Justification fournie par l'agent.`,
			statut: statuts[Math.floor(Math.random() * statuts.length)],
		};

		await Discipline.create(disciplineData as any);
		createdCount++;
	}

	console.log(`‚úÖ ${createdCount} cas de discipline cr√©√©s.`);
}

async function seedPromotions() {
	console.log(`\n=== Cr√©ation des donn√©es de promotions ===`);

	const agents = await Agent.findAll();
	const grades = await GradeAgent.findAll();
	const typesPromotion = await CategorieAgent.findAll();

	if (agents.length > 0 && grades.length > 1 && typesPromotion.length > 0) {
		for (let i = 0; i < 10; i++) {
			const agent = agents[i % agents.length];
			const currentGradeIndex = i % grades.length;
			const proposedGradeIndex = (i + 1) % grades.length;

			await Promotion.create({
				agentId: agent.id,
				currentGradeId: grades[currentGradeIndex].id,
				proposedGradeId: grades[proposedGradeIndex].id,
				typePromotionId: typesPromotion[i % typesPromotion.length].id,
				motif: `Promotion pour l'agent ${agent.nom} pour son excellent travail.`,
				statut: "soumise",
				dateProposition: new Date(),
			});
		}
		console.log("‚úÖ 10 promotions cr√©√©es.");
	} else {
		console.log("üü° Pas assez de donn√©es pour cr√©er les promotions.");
	}
}

async function seedTrainings() {
	console.log(`\n=== Cr√©ation des donn√©es de formations ===`);

	const agents = await Agent.findAll();
	if (agents.length === 0) {
		console.log("‚ö†Ô∏è  Aucun agent trouv√©, impossible de cr√©er des formations.");
		return;
	}

	const typesFormation: ("Initiale" | "Continue" | "Recyclage")[] = [
		"Initiale",
		"Continue",
		"Recyclage",
	];
	const domaines: string[] = [
		"Informatique",
		"Gestion de projet",
		"Communication",
		"Droit du travail",
		"S√©curit√©",
		"Langues",
	];

	const formationsParDomaine: { [key: string]: string[] } = {
		Informatique: [
			"D√©veloppement Web Avanc√©",
			"S√©curit√© des R√©seaux",
			"Administration de Bases de Donn√©es",
		],
		"Gestion de projet": ["M√©thodologies Agiles", "Gestion des Risques", "Certification PMP"],
		Communication: ["Prise de Parole en Public", "Communication Interpersonnelle"],
		"Droit du travail": ["N√©gociation Collective", "Gestion des Conflits"],
		S√©curit√©: ["Pr√©vention Incendie", "Premiers Secours"],
		Langues: ["Anglais des Affaires", "Swahili Professionnel"],
	};

	let createdCount = 0;

	// Cr√©er 80 formations
	for (let i = 0; i < 80; i++) {
		const agent = agents[Math.floor(Math.random() * agents.length)];
		const domaine = domaines[Math.floor(Math.random() * domaines.length)];
		const titreFormation =
			formationsParDomaine[domaine][
				Math.floor(Math.random() * formationsParDomaine[domaine].length)
			];

		const dateDebut = new Date();
		dateDebut.setFullYear(2025 + Math.floor(Math.random() * 1));
		dateDebut.setMonth(Math.floor(Math.random() * 12));
		dateDebut.setDate(Math.floor(Math.random() * 28) + 1);

		const duree = Math.floor(Math.random() * 10) + 2; // de 2 √† 11 jours
		const dateFin = new Date(dateDebut);
		dateFin.setDate(dateDebut.getDate() + duree);

		const trainingData = {
			agentId: agent.id,
			titre: titreFormation,
			typeFormation: typesFormation[Math.floor(Math.random() * typesFormation.length)],
			domaine: domaine,
			organisme: "Orasys",
			dateDebut,
			dateFin,
			duree,
			certificationObtenue: Math.random() > 0.5,
		};

		await Training.create(trainingData as any);
		createdCount++;
	}

	console.log(`‚úÖ ${createdCount} formations cr√©√©es.`);
}

async function seedRemunerations() {
	console.log(`\n=== Cr√©ation des r√©mun√©rations ===`);
	try {
		const agents = await Agent.findAll();
		if (agents.length === 0) {
			console.log("Aucun agent trouv√©, impossible de cr√©er les r√©mun√©rations.");
			return;
		}

		const remunerationsData: RemunerationCreationAttributes[] = [];
		const periods = Array.from({ length: 3 }, (_, i) => {
			const d = new Date();
			d.setMonth(d.getMonth() - i);
			return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, "0")}`;
		});
		const contractTypes: RemunerationCreationAttributes["typeContrat"][] = [
			"CDI",
			"CDD",
			"Vacataire",
		];
		const paymentMethods: RemunerationCreationAttributes["modePaiement"][] = [
			"Banque",
			"Esp√®ces",
			"Mobile Money",
		];

		for (const agent of agents) {
			for (const periode of periods) {
				const salaireBase = Math.floor(Math.random() * (3000 - 500 + 1)) + 500;
				const primeInstitutionnelle = Math.floor(Math.random() * 200);
				const indemniteTransport = Math.floor(Math.random() * 100);
				const cotisationSociale = salaireBase * 0.05;
				const impotProfessionnel = salaireBase * 0.15;

				const salaireBrut = salaireBase + primeInstitutionnelle + indemniteTransport;
				const totalRetenues = cotisationSociale + impotProfessionnel;
				const salaireNet = salaireBrut - totalRetenues;

				remunerationsData.push({
					agentId: agent.id,
					periode,
					salaireBase,
					joursTravailes: 22,
					primeInstitutionnelle,
					indemniteTransport,
					cotisationSociale,
					impotProfessionnel,
					salaireBrut,
					totalRetenues,
					salaireNet,
					typeContrat: contractTypes[Math.floor(Math.random() * contractTypes.length)],
					modePaiement: paymentMethods[Math.floor(Math.random() * paymentMethods.length)],
					valide: true,
					commentaire: `Fiche de paie pour ${periode}`,
				});
			}
		}

		await Remuneration.bulkCreate(remunerationsData);
		console.log(`‚úÖ ${remunerationsData.length} fiches de r√©mun√©ration cr√©√©es.`);
	} catch (error) {
		console.error("Erreur lors de la cr√©ation des r√©mun√©rations:", error);
	}
}

async function seedRetraites() {
	console.log(`\n=== Cr√©ation des dossiers de retraite ===`);
	try {
		const allAgents = await Agent.findAll();
		// Filter for agents born before 1970 to make data more realistic
		const eligibleAgents = allAgents.filter(
			(agent) => new Date(agent.dateNaissance).getFullYear() < 1970,
		);

		if (eligibleAgents.length === 0) {
			console.log("Aucun agent √©ligible √† la retraite trouv√©, seeder ignor√©.");
			return;
		}

		const retraitesData: RetraiteCreationAttributes[] = [];
		const retraiteTypes: RetraiteCreationAttributes["typeRetraite"][] = [
			"limite_age",
			"anticipee",
			"invalidite",
			"volontaire",
		];

		for (const agent of eligibleAgents) {
			const dateRetraite = new Date();
			dateRetraite.setFullYear(dateRetraite.getFullYear() + Math.floor(Math.random() * 5));

			const salaireActuel = Math.floor(Math.random() * (4000 - 1500 + 1)) + 1500;
			const anciennete = new Date().getFullYear() - new Date(agent.dateEmbauche).getFullYear();

			retraitesData.push({
				agentId: agent.id,
				typeRetraite: retraiteTypes[Math.floor(Math.random() * retraiteTypes.length)],
				dateRetraite,
				anciennete,
				salaireActuel,
				pensionEstimee: salaireActuel * 0.6,
				cotisationsTotales: anciennete * salaireActuel * 0.1 * 12,
				motifRetraite: "D√©part programm√©.",
			});
		}

		await Retraite.bulkCreate(retraitesData);
		console.log(`‚úÖ ${retraitesData.length} dossiers de retraite cr√©√©s.`);
	} catch (error) {
		console.error("Erreur lors de la cr√©ation des dossiers de retraite:", error);
	}
}

async function seedRecrutements() {
	console.log(`\n=== Cr√©ation des demandes de recrutement ===`);
	try {
		const agents = await Agent.findAll();
		if (agents.length === 0) {
			console.log("Aucun agent trouv√©, impossible de cr√©er des recrutements.");
			return;
		}

		const recrutementsData: RecrutementCreationAttributes[] = [];
		const postes: RecrutementAttributes["posteDemande"][] = [
			"Ressources Humaines",
			"Informatique",
			"Finances",
			"Biblioth√®que",
		];
		const grades: RecrutementAttributes["gradeSouhaite"][] = [
			"Assistant",
			"Chef de Travaux",
			"Agent Administratif Niveau 1",
			"Technicien",
		];
		const etats: RecrutementAttributes["etat"][] = ["en_attente", "approuvee", "rejettee"];

		for (let i = 0; i < 15; i++) {
			const etat = etats[i % etats.length];
			const creeParAgent = agents[i % agents.length];
			let valideParAgent: Agent | null = null;
			let dateValidation: Date | null = null;

			if (etat === "approuvee") {
				valideParAgent = agents[(i + 1) % agents.length]; // Different agent for validation
				dateValidation = new Date();
			}

			recrutementsData.push({
				nom: `NomCandidat${i}`,
				postnom: `Postnom${i}`,
				prenom: `Prenom${i}`,
				posteDemande: postes[i % postes.length],
				direction: postes[i % postes.length],
				gradeSouhaite: grades[i % grades.length],
				motif: `Besoin de personnel pour le d√©partement ${postes[i % postes.length]}.`,
				etat,
				documents: [
					{ nom: "CV.pdf", lien: "/docs/cv.pdf", type: "application/pdf", taille: 123456 },
					{
						nom: "Lettre.docx",
						lien: "/docs/lettre.docx",
						type: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
						taille: 78910,
					},
				],
				creePar: creeParAgent.id,
				validePar: valideParAgent ? valideParAgent.id : null,
				dateValidation,
				sexe: "M",
				dateNaissance: new Date(),
			});
		}

		await Recrutement.bulkCreate(recrutementsData);
		console.log(`‚úÖ ${recrutementsData.length} demandes de recrutement cr√©√©es.`);
	} catch (error) {
		console.error("Erreur lors de la cr√©ation des recrutements:", error);
	}
}

async function seedDocumentsRessourceHumaine() {
	console.log(`\n=== Cr√©ation des documents des ressources humaines ===`);
	try {
		const agents = await Agent.findAll();
		if (agents.length === 0) {
			console.log("Aucun agent trouv√©, impossible de cr√©er des documents.");
			return;
		}

		const documentsData: DocumentRessourceHumaineCreationAttributes[] = [
			{
				agentId: 1,
				titre: "Exemple de document RH",
				typeDocument: "CV actualis√©s num√©ris√©s",
				confidentialite: "public",
				fichier: [
					{
						nom: "cv_john_doe",
						lien: "/uploads/rh/cv_john_doe.pdf",
						type: "application/pdf",
						taille: 123456,
					},
				],
			},
			// ... autres documents ...
		];
		const docTypes: DocumentRessourceHumaineAttributes["typeDocument"][] = [
			"Photos passeport num√©ris√©es",
			"CV actualis√©s num√©ris√©s",
			"Cartes d‚Äôidentit√© num√©ris√©es",
			"Cartes de service/ Passeport √† jour  num√©ris√©s",
			"D√©cisions de recrutement num√©ris√©es",
			"D√©cisions de promotion num√©ris√©es",
			"listes des d√©pendants  num√©ris√©s",
			"Dipl√¥mes num√©ris√©s",
			"pages de Titre de la th√®se  de doctorat num√©ris√©es",
			"D√©cisions d‚Äôattribution du num√©ro matricule num√©ris√©s",
			"certificat de nationalit√© num√©ris√©s",
			"Attestations de naissance num√©ris√©es",
			"Attestations d‚Äôaptitude physique num√©ris√©es",
			"Attestations de r√©sidence num√©ris√©es",
			"Charges horaires des enseignants num√©ris√©s",
			"Prix obtenus num√©ris√©s",
			"Job description des administratifs num√©ris√©s",
		];

		for (const agent of agents) {
			for (let i = 0; i < 2; i++) {
				// Create 2 documents per agent
				const typeDocument = docTypes[Math.floor(Math.random() * docTypes.length)];
				documentsData.push({
					agentId: agent.id,
					titre: `${typeDocument} de ${agent.nom}`,
					typeDocument,
					emetteur: "Universit√© de Goma",
					confidentialite: "confidentiel",
					fichier: [
						{
							nom: `${typeDocument.toLowerCase().replace(/\s/g, "_")}_${agent.id}.pdf`,
							lien: `/uploads/documents/${typeDocument.toLowerCase().replace(/\s/g, "_")}_${agent.id}.pdf`,
							type: "application/pdf",
							taille: Math.floor(Math.random() * 500000) + 100000,
						},
					],
				});
			}
		}

		await DocumentRessourceHumaine.bulkCreate(documentsData);
		console.log(`‚úÖ ${documentsData.length} documents cr√©√©s.`);
	} catch (error) {
		console.error("Erreur lors de la cr√©ation des documents:", error);
	}
}

async function seedSocialSupports() {
	console.log(`\n=== Cr√©ation des demandes d'aide sociale ===`);
	try {
		const agents = await Agent.findAll();
		if (agents.length === 0) {
			console.log("Aucun agent trouv√©, impossible de cr√©er des aides sociales.");
			return;
		}

		const socialSupportsData: SocialSupportCreationAttributes[] = [];
		const supportTypes: SocialSupportAttributes["type"][] = [
			"Cas de maladie",
			"Cas de maternit√©",
			"Cas d‚Äôinvalidit√©",
			"Cas de d√©c√®s",
			"Cas d‚Äôaccidents au travail",
			"Cas de maladie professionnelle",
			"Veuves",
			"Veufs",
			"Autres",
		];
		const statuses: SocialSupportAttributes["statut"][] = ["En attente", "Approuv√©e", "Rejet√©e"];

		// Create social support for a subset of agents
		for (let i = 0; i < agents.length / 2; i++) {
			const agent = agents[i];
			const type = supportTypes[Math.floor(Math.random() * supportTypes.length)];
			const statut = statuses[Math.floor(Math.random() * statuses.length)];

			socialSupportsData.push({
				agentId: agent.id,
				type,
				description: `Demande d'${type.toLowerCase()} pour ${agent.prenom} ${agent.nom}`,
				montant: Math.floor(Math.random() * 50000) + 10000,
				dateDemande: new Date(),
				statut,
			});
		}

		await SocialSupport.bulkCreate(socialSupportsData);
		console.log(`‚úÖ ${socialSupportsData.length} demandes d'aide sociale cr√©√©es.`);
	} catch (error) {
		console.error("Erreur lors de la cr√©ation des aides sociales:", error);
	}
}

async function seedReclammations() {
	console.log(`\n=== Cr√©ation des r√©clamations ===`);
	try {
		const agents = await Agent.findAll();
		if (agents.length < 2) {
			console.log("Pas assez d'agents pour cr√©er des r√©clamations (min 2).");
			return;
		}

		const reclammationsData: ReclammationCreationAttributes[] = [];
		const motifs = ["Harc√®lement", "Conflit interpersonnel", "Conditions de travail", "Salaire"];
		const priorites = ["Basse", "Moyenne", "Haute"];

		for (let i = 0; i < 10; i++) {
			const agentPlaignant = agents[Math.floor(Math.random() * agents.length)];
			let agentResponsable = agents[Math.floor(Math.random() * agents.length)];

			// Ensure the responsible agent is not the same as the complaining agent
			while (agentResponsable.id === agentPlaignant.id) {
				agentResponsable = agents[Math.floor(Math.random() * agents.length)];
			}

			reclammationsData.push({
				agentId: agentPlaignant.id,
				responsable: agentResponsable.id,
				motifReclamation: motifs[Math.floor(Math.random() * motifs.length)],
				priorite: priorites[Math.floor(Math.random() * priorites.length)],
				dateIncident: new Date().toISOString().split("T")[0],
				temoin: "Aucun",
				sujetReclamation: `R√©clamation concernant ${motifs[Math.floor(Math.random() * motifs.length)].toLowerCase()}`,
				descriptionReclamation: "Description d√©taill√©e de l'incident...",
				solutionSouhaitee: "Une m√©diation et une r√©solution rapide.",
				justificatif: "",
				resolu: Math.random() > 0.5,
				createdAt: new Date(),
			});
		}

		await Reclammation.bulkCreate(reclammationsData);
		console.log(`‚úÖ ${reclammationsData.length} r√©clamations cr√©√©es.`);
	} catch (error) {
		console.error("Erreur lors de la cr√©ation des r√©clamations:", error);
	}
}

async function seedAuditLogs() {
	// TODO: Implement audit log seeding
}

async function seedDirectionAgents() {
	console.log(`\n=== Cr√©ation des directions ===`);
	try {
		const directions = [
			{ nom: "Ressources Humaines" as const },
			{ nom: "Patrimoine" as const },
			{ nom: "≈íuvres Estudiantines" as const },
		];

		for (const dir of directions) {
			await DirectionAgent.findOrCreate({
				where: { nom: dir.nom },
				defaults: dir,
			});
		}

		console.log("‚úÖ Directions cr√©√©es/v√©rifi√©es.");
	} catch (error) {
		console.error("‚ùå Erreur lors de la cr√©ation des directions:", error);
	}
}

async function seedAgentDirections() {
	console.log(`\n=== Association des agents aux directions ===`);
	try {
		const agents = await Agent.findAll({ limit: 5 });
		const directions = await DirectionAgent.findAll();

		if (agents.length === 0 || directions.length === 0) {
			console.log("‚ö†Ô∏è  Agents ou directions non trouv√©s, association impossible.");
			return;
		}

		for (let i = 0; i < agents.length; i++) {
			const agent = agents[i];
			const direction = directions[i % directions.length];
			await agent.addDirection(direction);
		}

		console.log("‚úÖ Agents associ√©s aux directions.");
	} catch (error) {
		console.error("‚ùå Erreur lors de l'association des agents aux directions:", error);
	}
}

async function seedTaskForecasts() {
	console.log(`\n=== Cr√©ation des pr√©visions de t√¢ches ===`);
	try {
		const agents = await Agent.findAll({ limit: 5 });
		const adminAgent = await Agent.findOne({ where: { matricule: "A0001" } });

		if (agents.length === 0 || !adminAgent) {
			console.log("‚ö†Ô∏è  Aucun agent trouv√©, impossible de cr√©er les pr√©visions de t√¢ches.");
			return;
		}

		const taskForecastsData = [
			{
				agentId: agents[0].id,
				assignerId: adminAgent.id,
				titre: "Pr√©parer le rapport annuel des RH",
				description:
					"Compiler toutes les donn√©es sur les recrutements, les d√©parts et les promotions de l'ann√©e.",
				dateDebut: new Date("2025-08-01"),
				dateFin: new Date("2025-08-15"),
				priorite: "Haute" as const,
				statut: "Pr√©vue" as const,
			},
			{
				agentId: agents[1].id,
				assignerId: adminAgent.id,
				titre: "Organiser la formation sur le nouveau logiciel",
				description:
					"Planifier les sessions de formation, pr√©parer le mat√©riel et envoyer les invitations.",
				dateDebut: new Date("2025-09-01"),
				dateFin: new Date("2025-09-30"),
				priorite: "Moyenne" as const,
				statut: "Pr√©vue" as const,
			},
			{
				agentId: agents[0].id,
				assignerId: adminAgent.id,
				titre: "Mettre √† jour les dossiers des employ√©s",
				description:
					"V√©rifier et compl√©ter les informations manquantes dans les dossiers de tous les employ√©s.",
				dateDebut: new Date("2025-07-25"),
				dateFin: new Date("2025-08-10"),
				priorite: "Moyenne" as const,
				statut: "En cours" as const,
			},
		];

		for (const data of taskForecastsData) {
			await TaskForecast.findOrCreate({
				where: { titre: data.titre, agentId: data.agentId },
				defaults: data,
			});
		}

		console.log("‚úÖ Pr√©visions de t√¢ches cr√©√©es/v√©rifi√©es.");
	} catch (error) {
		console.error("‚ùå Erreur lors de la cr√©ation des pr√©visions de t√¢ches:", error);
	}
}

async function seedPersonnelMovements() {
	console.log(`\n=== Cr√©ation des mouvements de personnel ===`);

	const agents = await Agent.findAll();
	const postes = await PosteAgent.findAll();

	if (agents.length === 0 || postes.length === 0) {
		console.log("‚ö†Ô∏è  Agents ou Postes non trouv√©s, impossible de cr√©er des mouvements.");
		return;
	}

	const typesMouvement: (
		| "Activite de service"
		| "Detachement"
		| "Disponibilite(interuption)"
		| "Suspension"
		| "Transfert"
		| "Changement de cadre organique"
	)[] = [
		"Activite de service",
		"Detachement",
		"Disponibilite(interuption)",
		"Suspension",
		"Transfert",
		"Changement de cadre organique",
	];

	let createdCount = 0;

	// Cr√©er 40 mouvements de personnel
	for (let i = 0; i < 40; i++) {
		const agent = agents[Math.floor(Math.random() * agents.length)];
		const typeMouvement = typesMouvement[Math.floor(Math.random() * typesMouvement.length)];

		const ancienPoste = postes.find((p) => p.id === agent.posteId);

		const mouvementData = {
			agentId: agent.id,
			typeMouvement,
			ancienPoste: ancienPoste ? ancienPoste.nom : "N/A",
			nouveauPoste: postes[Math.floor(Math.random() * postes.length)].nom,
			dateMouvement: new Date(
				2023,
				Math.floor(Math.random() * 12),
				Math.floor(Math.random() * 28) + 1,
			),
			motif: `Mouvement de type '${typeMouvement}' pour l'agent ${agent.nom}`,
			statut: "valide" as const,
		};

		await PersonnelMovement.create(mouvementData);
		createdCount++;
	}

	console.log(`‚úÖ ${createdCount} mouvements de personnel cr√©√©s.`);
}

async function seed() {
	try {
		await connectToDatabase();

		console.log("\n=== Cr√©ation des r√¥les ===");
		const roles = [
			{ name: "Administrateur Syst√®me", description: "Acc√®s total √† toutes les fonctionnalit√©s" },
			{ name: "Recteur", description: "Responsable principal de l'universit√©" },
			{ name: "SGAD", description: "Secr√©taire G√©n√©ral Administratif" },
			{ name: "Secreatire du SGAD", description: "Secr√©taire du SGAD" },
			{ name: "Assistant SGAD", description: "Assistant du Secr√©taire G√©n√©ral Administratif" },
			{ name: "DRH", description: "Directeur des Ressources Humaines" },
			{ name: "Assistant du DRH", description: "Assistant du Directeur des Ressources Humaines" },
			{ name: "Agent des Ressources Humaines", description: "Agent des Ressources Humaines" },
			{ name: "Directeur Patrimoine", description: "Directeur du Patrimoine" },
			{ name: "Assistant du Dir. Patrimoine", description: "Assistant du Directeur du Patrimoine" },
			{ name: "Agent du Patrimoine", description: "Agent du Patrimoine" },
			{ name: "DIROE", description: "Directeur des ≈íuvres Estudiantines" },
			{ name: "Assistant DIROE", description: "Assistant du Directeur des ≈íuvres Estudiantines" },
			{
				name: "Dir. Num√©risation et Archivage",
				description: "Directeur de la Num√©risation et Archivage",
			},
			{
				name: "Dir. des Mutuelles et Assurances",
				description: "Directeur des Mutuelles et Assurances",
			},
			{ name: "Agent Mutuelles et Assurances", description: "Agent des Mutuelles et Assurances" },
			{
				name: "Agent Num√©risation et Archivage",
				description: "Agent de la Num√©risation et Archivage",
			},
			{ name: "Agent", description: "Agent administratif ou technique : Utilisateur Standard" },
		];

		for (const role of roles) {
			await Role.findOrCreate({ where: { name: role.name }, defaults: role });
		}
		console.log("‚úÖ R√¥les cr√©√©s/v√©rifi√©s.");

		// Charger tous les r√¥les pour les affectations ult√©rieures
		const allRoles = await Role.findAll();

		console.log("\n=== Cr√©ation des modules et composants ===");
		for (const section of sidebarItems) {
			const [module] = await Module.findOrCreate({
				where: { name: section.title },
				defaults: {
					name: section.title,
					slug: slugify(section.title),
					description: `Module pour ${section.title}`,
					iconName: section.items[0]?.icon || "Grid3X3", // Use first item's icon or a default
					isActive: true,
				},
			});

			for (const [index, item] of section.items.entries()) {
				await Component.findOrCreate({
					where: { name: item.name, moduleId: module.id },
					defaults: {
						name: item.name,
						path: item.href,
						moduleId: module.id,
						iconName: item.icon,
						order: index,
						description: `Composant ${item.name}`,
					},
				});
			}
		}
		console.log("‚úÖ Modules et composants cr√©√©s/v√©rifi√©s.");

		await seedAffectations();
		await seedCategories();
		await seedGrades();
		await seedPostes();

		console.log("\n=== Cr√©ation de l'agent et de l'utilisateur admin ===");
		const firstPoste = await PosteAgent.findOne();
		const firstGrade = await GradeAgent.findOne();
		const firstCategorie = await CategorieAgent.findOne();
		const firstAffectation = await Affectation.findOne();

		if (!firstPoste || !firstGrade || !firstCategorie || !firstAffectation) {
			console.error(
				"Erreur: Impossible de trouver les donn√©es de base (poste, grade, cat√©gorie, affectation) pour cr√©er l'admin.",
			);
			return;
		}

		const adminAgentData = {
			matricule: "A0001",
			nom: "Admin",
			postnom: "Sys",
			prenom: "Admin",
			sexe: "M" as const,
			dateNaissance: new Date("1990-01-01"),
			lieuNaissance: "Kinshasa",
			nationalite: "Congolaise",
			provinceOrigine: "Kinshasa",
			villeResidence: "Kinshasa",
			adresseComplete: "1, Av. de l'Universit√©, Lemba, Kinshasa",
			telephone: "810000000",
			email: "admin@unigom.cd",
			etatCivil: "c√©libataire" as const,
			statut: "actif" as const,
			posteId: firstPoste.id,
			gradeId: firstGrade.id,
			categorieId: firstCategorie.id,
			affectationId: firstAffectation.id,
			situationAdministrative: "permanent" as const,
			typeAgent: "temps plein" as const,
			photo: "https://i.pravatar.cc/150?u=a042581f4e29026024d",
			nombreEnfants: 0,
			nombrePersonnesACharge: 0,
			dateEmbauche: new Date("2020-01-01"),
			numCnas: "CNAS0001",
		};

		let adminAgent = await Agent.findOne({ where: { matricule: adminAgentData.matricule } });
		if (!adminAgent) {
			adminAgent = await Agent.create(adminAgentData);
			console.log("‚úÖ Agent admin cr√©√©");
		} else {
			console.log("‚è≠Ô∏è  Agent admin d√©j√† existant");
		}

		const adminRole = await Role.findOne({ where: { name: "Administrateur Syst√®me" } });
		if (adminRole) {
			const adminUserData = {
				agentId: adminAgent.id,
				password: "$2b$10$r.GCSc5yfAv.IOSUo0CjX./y6mVbv13Ybl3I5XKgh0mfgfKY3BKVm", // Le mot de passe sera hash√© par le hook
				roleId: adminRole.id,
				isActive: true,
				email: "admin@unigom.cd",
			};
			let user = await User.findOne({ where: { email: adminUserData.email } });
			if (!user) {
				user = await User.create(adminUserData);
				console.log("‚úÖ Utilisateur admin cr√©√©");
			} else {
				console.log("‚è≠Ô∏è  Utilisateur admin d√©j√† existant");
			}
		} else {
			console.log(
				"‚ö†Ô∏è  R√¥le 'Administrateur Syst√®me' non trouv√©. Impossible de cr√©er l'utilisateur admin.",
			);
		}

		console.log("\n=== Cr√©ation des agents et utilisateurs suppl√©mentaires ===");
		const agentsToCreate = [
			{ nom: "Lutete", prenom: "Jean", postnom: "Mukendi", email: "charlotte.mwila@unigom.cd" },
			{ nom: "Tshibangu", prenom: "Alice", postnom: "Mwila", email: "benita.kasongo@unigom.cd" },
			{ nom: "Bope", prenom: "Jade", postnom: "Mukendi", email: "c√©dric.mwila@unigom.cd" },
			{ nom: "Kabwika", prenom: "C√©dric", postnom: "Mwila", email: "rapha√´l.lumbu@unigom.cd" },
			{ nom: "Kabeya", prenom: "In√®s", postnom: "Bope", email: "emma.mpoyi@unigom.cd" },
			{ nom: "Kabamba", prenom: "Manon", postnom: "Lumbu", email: "rapha√´l.kabamba@unigom.cd" },
			{ nom: "Ilunga", prenom: "C√©cile", postnom: "Mwila", email: "chlo√©.kasongo@unigom.cd" },
			{ nom: "Kasongo", prenom: "Manon", postnom: "Tshiala", email: "manon.kabwita@unigom.cd" },
			{ nom: "Mwila", prenom: "Paul", postnom: "Bope", email: "gabriel.ilunga@unigom.cd" },
			{ nom: "Mwamba", prenom: "Th√©o", postnom: "Mukendi", email: "louis.kabwika@unigom.cd" },
			{ nom: "Kabamba", prenom: "Luc", postnom: "Mpoyi", email: "grace.kabwika@unigom.cd" },
			{ nom: "Kabamba", prenom: "Grace", postnom: "Kanku", email: "luc.ntumba@unigom.cd" },
			{ nom: "Mwila", prenom: "Exauce", postnom: "Mbu", email: "julie.kabamba@unigom.cd" },
			{ nom: "Mwila", prenom: "Gabriel", postnom: "Kabwita", email: "benita.mwila@unigom.cd" },
			{ nom: "Mukendi", prenom: "Exauce", postnom: "Kabeya", email: "jade.mwila@unigom.cd" },
			{ nom: "Kabwika", prenom: "Jean", postnom: "Kabwita", email: "jean.mwila@unigom.cd" },
			{ nom: "Mpoyi", prenom: "Lucas", postnom: "Kabwita", email: "thomas.kabwika@unigom.cd" },
			{ nom: "Mukendi", prenom: "Charlotte", postnom: "Kabamba", email: "lucas.mukendi@unigom.cd" },
			{ nom: "Mukendi", prenom: "Juliette", postnom: "Kasongo", email: "l√©onie.kabamba@unigom.cd" },
			{ nom: "Kabamba", prenom: "Chris", postnom: "Ilunga", email: "julie.kankolongo@unigom.cd" },
			{ nom: "Mwila", prenom: "Camille", postnom: "Kabwita", email: "camille.kabwita1@unigom.cd" },
			{ nom: "Mwila", prenom: "Nathan", postnom: "Kabwita", email: "nathan.kabwita1@unigom.cd" },
			{ nom: "Mwila", prenom: "Antoine", postnom: "Kabwita", email: "antoine.kabwita1@unigom.cd" },
			{ nom: "Mwila", prenom: "Camille", postnom: "Kabwita", email: "camille.kabwita2@unigom.cd" },
			{ nom: "Mwila", prenom: "Nathan", postnom: "Kabamba", email: "nathan.mwila@unigom.cd" },
			{ nom: "Mukendi", prenom: "Chris", postnom: "Mpiana", email: "nicolas.kabwika@unigom.cd" },
			{ nom: "Mukendi", prenom: "Nathan", postnom: "Kabwika", email: "nathan.mukendi@unigom.cd" },
			{ nom: "Mukendi", prenom: "Thomas", postnom: "Mwamba", email: "felly.kabamba@unigom.cd" },
			{ nom: "Mukendi", prenom: "Antoine", postnom: "Mwila", email: "th√©o.kabeya@unigom.cd" },
			{ nom: "Tshiala", prenom: "Benita", postnom: "Mpoyi", email: "elise.kasongo@unigom.cd" },
			{ nom: "Kabeya", prenom: "Chlo√©", postnom: "Ntumba", email: "√©lodie.mpoyi@unigom.cd" },
			{ nom: "Kabeya", prenom: "Baptiste", postnom: "Lumbu", email: "camille.kabwika@unigom.cd" },
			{ nom: "Mukendi", prenom: "√âlodie", postnom: "Kabeya", email: "thomas.mukendi@unigom.cd" },
			{ nom: "Mpoyi", prenom: "Pierre", postnom: "Kabwita", email: "ambre.kabamba@unigom.cd" },
			{ nom: "Kabeya", prenom: "Grace", postnom: "Kabwita", email: "grace.kabwita1@unigom.cd" },
			{ nom: "Kabwika", prenom: "Nathan", postnom: "Kabeya", email: "grace.mwila@unigom.cd" },
			{ nom: "Mwamba", prenom: "Sophie", postnom: "Mwila", email: "ambre.mukendi@unigom.cd" },
			{ nom: "Kabwita", prenom: "Anna", postnom: "Mwila", email: "elise.kabamba@unigom.cd" },
			{ nom: "Mukendi", prenom: "Enzo", postnom: "Mwila", email: "thomas.kabamba@unigom.cd" },
			{ nom: "Kasongo", prenom: "Th√©o", postnom: "Mpoyi", email: "simon.mpoyi@unigom.cd" },
			{ nom: "Kabamba", prenom: "Anna", postnom: "Kabwika", email: "julie.mpiana@unigom.cd" },
			{ nom: "Mwila", prenom: "Antoine", postnom: "Kabwita", email: "antoine.kabwita2@unigom.cd" },
			{ nom: "Mwila", prenom: "Camille", postnom: "Kabwita", email: "camille.kabwita3@unigom.cd" },
			{ nom: "Mwila", prenom: "Nathan", postnom: "Kabamba", email: "nathan.mwila6@unigom.cd" },
			{ nom: "Mukendi", prenom: "Chris", postnom: "Mpiana", email: "chris.mpiana@unigom.cd" },
			{ nom: "Mukendi", prenom: "Nathan", postnom: "Kabwika", email: "nathan.kabwika@unigom.cd" },
			{ nom: "Mukendi", prenom: "Thomas", postnom: "Mwamba", email: "thomas.mwamba@unigom.cd" },
			{ nom: "Mukendi", prenom: "Antoine", postnom: "Mwila", email: "antoine.mwila@unigom.cd" },
			{ nom: "Tshiala", prenom: "Benita", postnom: "Mpoyi", email: "benita.mpoyi@unigom.cd" },
			{ nom: "Kabeya", prenom: "Chlo√©", postnom: "Ntumba", email: "chlo√©.ntumba@unigom.cd" },
			{ nom: "Kabeya", prenom: "Baptiste", postnom: "Lumbu", email: "baptiste.lumbu@unigom.cd" },
			{ nom: "Mukendi", prenom: "√âlodie", postnom: "Kabeya", email: "√©lodie.kabeya@unigom.cd" },
			{ nom: "Mpoyi", prenom: "Pierre", postnom: "Kabwita", email: "pierre.kabwita@unigom.cd" },
			{ nom: "Kabeya", prenom: "Grace", postnom: "Kabwita", email: "grace.kabwita2@unigom.cd" },
			{ nom: "Kabwika", prenom: "Nathan", postnom: "Kabeya", email: "nathan.kabeya@unigom.cd" },
			{ nom: "Mwamba", prenom: "Sophie", postnom: "Mwila", email: "sophie.mwila@unigom.cd" },
			{ nom: "Kabwita", prenom: "Anna", postnom: "Mwila", email: "anna.mwila@unigom.cd" },
			{ nom: "Mukendi", prenom: "Enzo", postnom: "Mwila", email: "enzo.mwila@unigom.cd" },
			{ nom: "Kasongo", prenom: "Th√©o", postnom: "Mpoyi", email: "th√©o.mpoyi@unigom.cd" },
		];

		const regularRole = await Role.findOne({ where: { name: "Agent" } });
		if (!regularRole) {
			console.log("‚ö†Ô∏è  R√¥le 'Agent' non trouv√©. Impossible de cr√©er les utilisateurs standards.");
		} else {
			const affectations = await Affectation.findAll();
			const categories = await CategorieAgent.findAll();
			const grades = await GradeAgent.findAll();
			const postes = await PosteAgent.findAll();

			if (
				affectations.length === 0 ||
				categories.length === 0 ||
				grades.length === 0 ||
				postes.length === 0
			) {
				console.log(
					"‚ö†Ô∏è  Donn√©es de base (affectations, cat√©gories, grades, postes) non trouv√©es. Impossible de cr√©er les agents.",
				);
				return;
			}

			for (const [index, agentInfo] of agentsToCreate.entries()) {
				const matricule = `A${(index + 2).toString().padStart(4, "0")}`;

				let agent = await Agent.findOne({ where: { matricule: matricule } });
				if (!agent) {
					agent = await Agent.create({
						matricule: matricule,
						nom: agentInfo.nom,
						postnom: agentInfo.postnom,
						prenom: agentInfo.prenom,
						email: agentInfo.email,
						sexe: index % 2 === 0 ? "M" : "F",
						dateNaissance: new Date(`${1985 + index}-01-01`),
						lieuNaissance: `Lieu ${index + 2}`,
						nationalite: "Congolaise",
						provinceOrigine: "Kinshasa",
						villeResidence: "Kinshasa",
						adresseComplete: `${index + 2}, Av. Test, Kinshasa`,
						telephone: `8100000${(index + 2).toString().padStart(2, "0")}`,
						etatCivil: "c√©libataire" as const,
						statut: "actif" as const,
						posteId: postes[index % postes.length].id,
						gradeId: grades[index % grades.length].id,
						categorieId: categories[index % categories.length].id,
						affectationId: affectations[index % affectations.length].id,
						situationAdministrative: "permanent",
						typeAgent: "temps plein",
						photo: `https://i.pravatar.cc/150?u=a042581f4e2902670${index}`,
						dateEmbauche: new Date(`${2021 + index}-01-01`),
						numCnas: `CNAS${(index + 2).toString().padStart(4, "0")}`,
					});
					console.log(`‚úÖ Agent ${agent.prenom} ${agent.nom} cr√©√©.`);
				} else {
					console.log(`‚è≠Ô∏è  Agent ${agent.prenom} ${agent.nom} d√©j√† existant.`);
				}

				// let user = await User.findOne({ where: { agentId: agent.id } });
				// if (!user) {
				// 	await User.create({
				// 		agentId: agent.id,
				// 		password: "$2b$10$r.GCSc5yfAv.IOSUo0CjX./y6mVbv13Ybl3I5XKgh0mfgfKY3BKVm", // Le mot de passe sera hash√© par le hook
				// 		roleId: allRoles[Math.floor(Math.random() * allRoles.length)].id,
				// 		email: `${Math.floor(Math.random() * 19900)}${agent.email}`,
				// 		isActive: true,
				// 	});
				// 	console.log(`  ‚úÖ Utilisateur ${agentInfo.prenom.toLowerCase()} cr√©√©.`);
				// } else {
				// 	console.log(`  ‚è≠Ô∏è  Utilisateur ${agentInfo.prenom.toLowerCase()} d√©j√† existant.`);
				// }
			}
		}

		// === Affecter les composants des modules Accueil, Communication et GAD - Administration √† l'utilisateur admin
		console.log(
			"\n=== Affecter les composants des modules Accueil, Communication et GAD - Administration √† l'utilisateur admin\n",
		);
		const modulesToAffect = ["Accueil", "GAD - Administration"];
		const adminUser = await User.findOne({
			where: { email: adminAgent.email },
			include: { model: Role, as: "role" },
		});
		if (adminUser) {
			for (const moduleName of modulesToAffect) {
				const module = await Module.findOne({ where: { name: moduleName } });
				if (!module) continue;
				const components = await Component.findAll({ where: { moduleId: module.id } });
				for (const component of components) {
					const already = await userComponent.findOne({
						where: { userId: adminUser.id, componentId: component.id },
					});

					if (!already) {
						await userComponent.create({
							userId: adminUser.id,
							componentId: component.id,
							grantedBy: "admin",
						});
						console.log(`Composant '${component.name}' affect√© √† l'utilisateur admin`);
					} else {
						console.log(`Composant '${component.name}' d√©j√† affect√© √† l'utilisateur admin`);
					}
					// V√©rifier et ins√©rer dans RoleComponent si n√©cessaire
					const alreadyRoleComponent = await RoleComponent.findOne({
						where: { roleId: (adminUser as any).role.id, componentId: component.id },
					});
					if (!alreadyRoleComponent) {
						await RoleComponent.create({
							roleId: (adminUser as any).role.id,
							componentId: component.id,
						});
						console.log(
							`Composant '${component.name}' li√© au r√¥le '${(adminUser as any).role.name}'`,
						);
					} else {
						console.log(
							`Composant '${component.name}' d√©j√† li√© au r√¥le '${(adminUser as any).role.name}'`,
						);
					}
				}
			}
		}

		console.log("\n=== Affectation des composants aux r√¥les ===");

		// 7. Affecter les composants de base √† tous les r√¥les
		await assignRolesToComponents(
			[
				"Administrateur Syst√®me",
				"Recteur",
				"SGAD",
				"Assistant SGAD",
				"Secreatire du SGAD",
				"DRH",
				"Assistant du DRH",
				"Directeur Patrimoine",
				"Assistant du Dir. Patrimoine",
				"Agent des Ressources Humaines",
				"DIROE",
				"Assistant DIROE",
				"Agent du Patrimoine",
				"Dir. Num√©risation et Archivage",
				"Dir. des Mutuelles et Assurances",
				"Agent Mutuelles et Assurances",
				"Agent Num√©risation et Archivage",
				"Agent",
			],
			["Tableau de bord"],
		);
		const allComponents = await Component.findAll();
		const allComponentNames = allComponents.map((c) => c.name);
		await assignRolesToComponents(["Administrateur Syst√®me"], allComponentNames);

		console.log(`\n === Affectation de tous les composant du module RH au DRH et a son assistant`);
		const moduleRh = await Module.findOne({ where: { name: "Ressources Humaines" } });
		if (moduleRh) {
			const componentsRh = await Component.findAll({ where: { moduleId: moduleRh.id } });
			const componentNamesRh = componentsRh.map((c) => c.name);
			await assignRolesToComponents(
				["DRH", "Assistant du DRH", "Agent des Ressources Humaines"],
				componentNamesRh,
				moduleRh.id,
			);
		} else {
			console.log("‚ö†Ô∏è  Attention: Le module 'Ressources Humaines' n'a pas √©t√© trouv√©.");
		}

		// === Affecter les composants de base √† tous les r√¥les
		await assignRolesToComponents(
			[
				"Recteur",
				"SGAD",
				"Assistant SGAD",
				"Secreatire du SGAD",
				"DRH",
				"Agent",
				"Assistant du DRH",
				"Directeur Patrimoine",
				"Assistant du Dir. Patrimoine",
				"DIROE",
				"Assistant DIROE",
				"Agent des Ressources Humaines",
				"Administrateur Syst√®me",
				"Agent du Patrimoine",
				"Dir. Num√©risation et Archivage",
				"Dir. des Mutuelles et Assurances",
				"Agent Mutuelles et Assurances",
				"Agent Num√©risation et Archivage",
				"Agent",
			],
			["Tableau de bord"],
		);

		// === Lancement des seeders suppl√©mentaires ===
		console.log("\n=== Lancement des seeders suppl√©mentaires ===");
		await seedConges();
		await seedPrets();
		await seedEvaluations();
		await seedDiscipline();
		await seedPromotions();
		await seedTrainings();
		await seedRemunerations();
		await seedRetraites();
		await seedRecrutements();
		await seedPersonnelMovements();
		await seedDocumentsRessourceHumaine();
		await seedSocialSupports();
		await seedReclammations();
		await seedAuditLogs();
		await seedTaskForecasts();
		await seedDirectionAgents();
		await seedAgentDirections();
	} catch (error) {
		console.error("‚ùå Erreur d√©taill√©e lors de l'initialisation de la base de donn√©es:", error);
		throw error;
	} finally {
		console.log("üîå Connexion √† la base de donn√©es ferm√©e.");
	}
}

(async () => {
	try {
		await seed();
		console.log("\nüéâ --- Initialisation de la base de donn√©es termin√©e --- üéâ");
		process.exit(0);
	} catch (error) {
		console.error("\n‚ùå --- √âchec de l'initialisation de la base de donn√©es --- ‚ùå");
		console.error(error);
		process.exit(1);
	}
})();
